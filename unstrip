#! /usr/bin/env python
#! /usr/local/lib/python2.7       

import bap
import inject
import time
from bap.adt import Visitor   
from sys import argv
import os
import os.path


def get_symbols():
    print "Retrieving symbols... "
    memmap = lib.memmap
    syms = []
    for mem in memmap:
        memstr = str(mem)
        entry = memstr.split("\"")[1]
        sym = {}
        if entry == "symbol":
            sym['name'] = memstr.split("\"")[3]
            sym['begin'] = int(memstr.split("(")[2].split(",")[0], 16)
            sym['end'] = int(memstr.split("(")[2].split(",")[1][1:-1], 16)
            sym['length'] = sym['end'] - sym['begin'] + 1
            sym['code'] = ""
            sym['section'] = ".text"
            syms.append(sym)
    print "Done\n"
    return syms

def scan_sections():
    print "Scanning library sections... "
    sections = lib.sections.values()
    for sym in symbols:
	for sec in sections:
            if sym['begin'] > sec.beg and sym['end'] < sec.end:
                offset = sym['begin'] - sec.beg
                sym['code'] = sec.data[offset : offset + sym['length']]
                sym['section'] = sec.name
    print "Done\n"

def find_matches():
    print "Finding matches... "
    matches = []
    for sym in symbols:
        try:
            sec = stripped.sections[sym['section']]
            index = sec.data.find(sym['code'])    
            if index > -1: 
                symbol_file.write("<%s, %s, %s, %s, g>\n" % (sym['name'], hex(sec.beg+index), hex(sym['length']), sym['section']))
                matches.append(hex(sec.beg+index))
        except:
            pass
    print "Done\n"
    return matches

def check_stripped():
    memmap = stripped.memmap
    for mem in memmap:
        memstr = str(mem)
        entry = memstr.split("\"")[1]
        if entry == "symbol":
            print "%s is not stripped!\n" % filename
            exit()

class SubVisitor(Visitor):
    def __init__(self):
        self.addresses = {}

    def enter_Sub(self,sub):
        self.addresses[sub.id] = sub.attrs['address']

# initial setup
start = time.time()
with open('test.c', 'w') as fobj:
    fobj.write('''
#include <stdio.h>
int main()
{
    printf(\"Hello, World!\\n\");
    return 0;
}
''')
os.system('gcc -static test.c')

# run 
filename = argv[1]
#size = os.stat(filename).st_size
#if size < 10000:
#    print "Sorry, %s is dynamically-linked.\n" % filename
#    exit()

#lib = bap.run('lib_test/lib_abcdef')
lib = bap.run('a.out')
symbols = get_symbols()
scan_sections()
stripped = bap.run(filename)
check_stripped()
temp_name = "temp"
symbol_file = open(temp_name, 'w')
entries = find_matches()

subs = SubVisitor()
subs.run(stripped.program)

i = 0
for address in subs.addresses:
    addr = str(address)
    index = addr.find("sub")
    value = hex(int(addr[index+4:-2], 16))
    contains = False
    for entry in entries:
        if entry == value:
            contains = True
            break
    if contains == False:
        symbol_file.write("<func%s, %s, 0, .text, l>\n" % (i, value))
        i = i + 1

symbol_file.flush()
inject.injectSyms(filename,temp_name,"unstripped_"+filename) 

# delete temporary files (a.out, temp and test.c)
os.remove('a.out')
os.remove('test.c')
os.remove('temp')

end = time.time()
print "runtime: " + str((end - start) / 60.0)
